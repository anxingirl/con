<?php

/**
 * Implements hook_help().
 */
function searchtabs_help($path, $arg) {
  switch ($path) {
    case 'admin/help#searchtabs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Search module provides the ability to index and search for content by exact keywords, and for users by username or e-mail. For more information, see the online handbook entry for <a href="@search-module">Search module</a>.', array('@search-module' => 'http://drupal.org/documentation/modules/search/', '@search' => url('search'))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Searching content and users') . '</dt>';
      $output .= '<dd>' . t('Users with <em>Use search</em> permission can use the search block and <a href="@search">Search page</a>. Users with the <em>View published content</em> permission can search for content containing exact keywords. Users with the <em>View user profiles</em> permission can search for users containing the keyword anywhere in the user name, and users with the <em>Administer users</em> permission can search for users by email address. Additionally, users with <em>Use advanced search</em> permission can find content using more complex search methods and filtering by choosing the <em>Advanced search</em> option on the <a href="@search">Search page</a>.', array('@search' => url('search'))) . '</dd>';
      $output .= '<dt>' . t('Indexing content with cron') . '</dt>';
      $output .= '<dd>' . t('To provide keyword searching, the search engine maintains an index of words found in the content and its fields, along with text added to your content by other modules (such as comments from the core Comment module, and taxonomy terms from the core Taxonomy module). To build and maintain this index, a correctly configured <a href="@cron">cron maintenance task</a> is required. Users with <em>Administer search</em> permission can further configure the cron settings on the <a href="@searchsettings">Search settings page</a>.', array('@cron' => 'http://drupal.org/cron', '@searchsettings' => url('admin/config/search/settings'))) . '</dd>';
      $output .= '<dt>' . t('Content reindexing') . '</dt>';
      $output .= '<dd>' . t('Content-related actions on your site (creating, editing, or deleting content and comments) automatically cause affected content items to be marked for indexing or reindexing at the next cron run. When content is marked for reindexing, the previous content remains in the index until cron runs, at which time it is replaced by the new content. Unlike content-related actions, actions related to the structure of your site do not cause affected content to be marked for reindexing. Examples of structure-related actions that affect content include deleting or editing taxonomy terms, enabling or disabling modules that add text to content (such as Taxonomy, Comment, and field-providing modules), and modifying the fields or display parameters of your content types. If you take one of these actions and you want to ensure that the search index is updated to reflect your changed site structure, you can mark all content for reindexing by clicking the "Re-index site" button on the <a href="@searchsettings">Search settings page</a>. If you have a lot of content on your site, it may take several cron runs for the content to be reindexed.', array('@searchsettings' => url('admin/config/search/settings'))) . '</dd>';
      $output .= '<dt>' . t('Configuring search settings') . '</dt>';
      $output .= '<dd>' . t('Indexing behavior can be adjusted using the <a href="@searchsettings">Search settings page</a>. Users with <em>Administer search</em> permission can control settings such as the <em>Number of items to index per cron run</em>, <em>Indexing settings</em> (word length), <em>Active search modules</em>, and <em>Content ranking</em>, which lets you adjust the priority in which indexed content is returned in results.', array('@searchsettings' => url('admin/config/search/settings'))) . '</dd>';
      $output .= '<dt>' . t('Search block') . '</dt>';
      $output .= '<dd>' . t('The Search module includes a default <em>Search form</em> block, which can be enabled and configured on the <a href="@blocks">Blocks administration page</a>. The block is available to users with the <em>Search content</em> permission.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dt>' . t('Extending Search module') . '</dt>';
      $output .= '<dd>' . t('By default, the Search module only supports exact keyword matching in content searches. You can modify this behavior by installing a language-specific stemming module for your language (such as <a href="http://drupal.org/project/porterstemmer">Porter Stemmer</a> for American English), which allows words such as walk, walking, and walked to be matched in the Search module. Another approach is to use a third-party search technology with stemming or partial word matching features built in, such as <a href="http://drupal.org/project/apachesolr">Apache Solr</a> or <a href="http://drupal.org/project/sphinx">Sphinx</a>. These and other <a href="@contrib-search">search-related contributed modules</a> can be downloaded by visiting Drupal.org.', array('@contrib-search' => 'http://drupal.org/project/modules?filters=tid%3A105')) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}
/**
 * Implements hook_block_info().
 */
function searchtabs_block_info(){
    $blocks = array();
    $blocks['searchtabs_form'] = array(
        'info' => t('A block for searchtabs form.'),
         'cache' => DRUPAL_NO_CACHE,
     );
 }
 

 /**
   * Implements hook_block_view().
   */
function searchtabs_block_view($block_name = ''){
     if ($block_name == 'searchtabs_form') {

         $block['content'] = drupal_get_form('searchtabs_block_form');
         return $block;
     }
 }

 /**
  * Implements hook_forms().
  */
 function searchtabs_forms() {
     $forms['searchtabs_block_form']=array(
         'callback' => 'searchtabs_box',
         'arguments' => array('searchtabs_block_form'),
     );
     return $forms;
 }
 
 /**
  * Form builder; Output a search form for the searchtabs block
  *
  *@ingroup forms
  *@see searchtabs_box_form_submit()
  *@see search-block-form.tpl.php
  */
 function searchtabs_box($form, &$form_state, $form_id){
   $form[$form_id] = array(
         '#type' => 'textfield',
         '#title' => t('Search'),
         '#title_display' => 'invisible',
         '#size' => 15,
         '#default_value' => '',
         '#attributes' => t('Enter the terms you wish to search for.'),
     );
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
   $form['submit'][] = 'searchtabs_box_form_submit';

     return $form;
 }
 
 /**
  * Process a block search form submission.
  */
 function searchtabs_box_form_submit($form, &$form_state){

   // The search form relies on control of the redirect destination for its
   // functionality, so we override any static destination set in the request,
   // for example by drupal_access_denied() or drupal_not_found()
   // (see http://drupal.org/node/292565).
   if (isset($_GET['destination'])) {
     unset($_GET['destination']);
   }

   // Check to see if the form was submitted empty.
   // If it is empty, display an error message.
   // (This method is used instead of setting #required to TRUE for this field
   // because that results in a confusing error message.  It would say a plain
   // "field is required" because the search keywords field has no title.
   // The error message would also complain about a missing #title field.)
   if ($form_state['values']['searchtabs_block_form'] == '') {
     form_set_error('keys', t('Please enter some keywords.'));
   }

   $form_id = $form['form_id']['#value'];

  # $info = search_get_default_module_info();
  #if ($info) {
     #$form_state['redirect'] = 'search/' . $info['path'] . '/' . trim($form_state['values'][$form_id]);
     $form_state['redirect'] = 'www.baidu.com/?wd=' . trim($form_state['values'][$form_id]);
  #}
  #else {
  #  form_set_error(NULL, t('Search is currently disabled.'), 'error');
  #}
 }

 /**
  *   
  *  Implements hook_menu().
  */
 function searchtabs_menu(){
    $items['searchtabs'] = array(
      'title' => 'Searchtabs',
      'page callback' => 'searchtabs_view',
      'access callback' => 'searchtabs_is_active',
      'type' => MENU_SUGGESTED_ITEM,
      'file' => 'searchtabs.pages.inc',
     );
    $item['mymenu'] = array(
      'description' => 'test1',
      'page callback' => 'searchtabs_view',
      'access callback' => 'searchtabs_is_active', // 使用 user_access()，权限必须存在，用 hook_perm 定义一个权限
      'type' => MENU_CALLBACK,
   );
    return $items;
 }

 /**
  * Determines access for the ?q=search path
  */
 function searchtabs_is_active(){
     //return user_access('search_content') &&  search_get_info().
     return user_access('searchtabs content');
 }

/**
 * Implements hook_permission 
 *  
 */ 
 function searchtabs_permission(){
     return array(
        'administer searchtabs' => array(
        'title' => t('Administer searchtabs'),
        ),
        'searchtabs content' => array(
        'title' => t('Use searchtabs'),
        ),
     );
 }





