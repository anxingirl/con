<?php

/*
 * @return result of "select bid,status,rid from {bnu_status}"
 */
function bnu_module_getstatus(){
  
  $query = "SELECT bid,status,rid FROM {bnu_status}";
  
  $resultarray = db_query($query)->fetchAll();
  
  return $resultarray;
  
}
function _get_role_from_status($status){
  $role = db_query('SELECT rid FROM {bnu_status} WHERE status = :status', array(':status' => $status))->fetchField();
  $role_name = db_query('SELECT name FROM {role} WHERE rid = :rid', array(':rid' => $role))->fetchField();

  //$resultarray = db_query($query)->fetchAll();
  if($role_name)
    return $role_name;
  else
    return null;
}

/*
 * @return result of "select rid, name from role"
 */
function bnu_module_getroles(){
  $query = "select rid, name from {role} where rid not in (1,2,3)";
  $resultarray = db_query($query)->fetchAll();
  return $resultarray;
}
/**
 * admin form for bnu_module
 * @return form
 */
function bnu_module_admin() {
  $form = array();
  $statusarray = bnu_module_getstatus();
  $rolesarray = bnu_module_getroles();
  $roles = array();
  foreach($rolesarray as $role){
    // $role->rid,$role->name
    $roles= $roles + array($role->rid => $role->name );
  }
  $keys = array_keys($roles);
  
  foreach ($statusarray as $status) {
    $status->status=preg_replace("/\s+/", "_", $status->status); 
    $form[$status->status] = array(
      '#type' => 'select',
      '#title' => $status->status,
      '#options' => $roles,
      '#default_value' => $status->rid,
      //'#description' => $status->bid,
   );
  }
  $form['#submit'][] = 'bnu_module_admin_submit';
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
  );
  
  /*
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'system_settings_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }
   */
  return $form;
}

/*
 * form submit function for form "bnu_module_admin"
 */
function bnu_module_admin_submit($form, &$form_state){
  
  //submit function for form bnu_module_admin
  //dpm($form);
  //dpm(array_keys($form_state['values']));
  $keys = array_keys($form_state['values']);
  //update table {bnu_status}
  //update {bnu_status} set status = $status_re where rid = $rid
  foreach($keys as $status){
    $status_re =preg_replace("/_/", " ", $status); 
    $rid = $form_state['values'][$status];
    $num_updated = db_update('bnu_status') // Table name no longer needs {}
    ->fields(array(
    'rid' => $rid,
  ))
  ->condition('status', $status_re)
  ->execute();
  }
}

/**
 * Implements hook_permission
 */
function bnu_module_permission(){
    return array(
       'administer bnu_module settings' => array(
       'title' => t('Administer bnu_module'),
       ),
    );
}
/**
 * Implements hook_menu()
 */
function bnu_module_menu() {
  $items['admin/settings/bnu_module'] = array(
    'title' => 'Set bnu status and roles.',
    'description' => 'Map the z303_bor_status to the role you want to set.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bnu_module_admin'),
    'access arguments' => array('administer bnu_module settings'),
    'type' => MENU_CALLBACK,
   );
    $items['bnu_xservice'] = array(
    'title' => 'X-SERVICE',
    'page callback' => 'xservice_page',
  //  'page callback' => 'curl_xservice',
    'page arguments' => array('11112011125', '11112011125'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['bnu_xservice/%/%'] = array(
    'title' => 'X-SERVICE',
    'page callback' => 'xservice_page',
  //  'page callback' => 'curl_xservice',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 * 
 * @params array $items
 * Menu items alter
 */
function bnu_module_menu_alter(&$items) {
  $items['node']['page callback'] = 'bnu_module_node_page_default';
}
/**
 * Menu callback: Cancel all the stuff created by node_page_default() .
 * Generates a listing of promoted nodes.
 * 
 * @return array
 *   An array in the format expected by drupal_render().
 *
 * @see bnu_module_menu_alter() node_menu()
 */
function bnu_module_node_page_default() { 
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('n.promote', 1)
    ->condition('n.status', 1)
    ->orderBy('n.sticky', 'DESC')
    ->orderBy('n.created', 'DESC')
    ->extend('PagerDefault')
    ->limit(variable_get('default_nodes_main', 10))
    ->addTag('node_access');

  $nids = $select->execute()->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes);

    // 'rss.xml' is a path, not a file, registered in node_menu().
    drupal_add_feed('rss.xml', variable_get('site_name', 'Drupal') . ' ' . t('RSS'));
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
    drupal_set_title('');
  }
  else {
    //drupal_set_title(t('Welcome to @site-name', array('@site-name' => variable_get('site_name', 'Drupal'))), PASS_THROUGH);

    $default_message = '<p>' . t('No front page content has been created yet.') . '</p>';

    $default_links = array();
    if (_node_add_access()) {
      $default_links[] = l(t('Add new content'), 'node/add');
    }
    if (!empty($default_links)) {
      $default_message .= theme('item_list', array('items' => $default_links));
    }
    $default_message = '';
    $build['default_message'] = array(
      '#markup' => $default_message,
      '#prefix' => '<div id="first-time">',
      '#suffix' => '</div>',
    );
  }
  $build = array();//I don't need all these.
  return $build;
}

/**
 * Implements hook_form_alter().
 * We replace the local login validation handler with our own.
 */

 function bnu_module_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
     $form['#validate'] = bnu_module_login_validators();
  } 
 }

 function bnu_module_login_validators() {
  //return array('user_login_name_validate', 'user_login_authenticate_validate','bnu_module_user_form_validate', 'user_login_final_validate');
  return array('user_login_name_validate', 'bnu_module_user_form_validate','user_login_authenticate_validate', 'user_login_final_validate');
}

function xservice_page($name, $pass){
  $op = 'bor-auth';
  $auth = xml_parse_xservice($op,$name,$pass);
  return "null";
}
/*
 * Check the password and name from pds.
 */
function xml_parse_xservice($op = 'bor-auth', $id = '11112010098', $verification = 'muzi82', $session = '5P1N7ACQDDVI5PSGIAQ2MMD5TAS883FKT224695XXJE6RPC8VA'){
  $ch = curl_init();
  $url = "http://opac.lib.bnu.edu.cn:8080/X?op=".$op."&id=".$id."&verification=".$verification."&session=".$session;
  //$url .= "op=".$op."&id=".$id."&verification=".$verification."&session=".$session;
  //curl_setopt($ch, CURLOPT_URL, "http://opac.lib.bnu.edu.cn:8080/X?op=bor-auth&id=11112010098&verification=muzi82&session=5P1N7ACQDDVI5PSGIAQ2MMD5TAS883FKT224695XXJE6RPC8VA");
 // $file = file("sites/default/files/11112011125.xml");
  //$url = "http://localhost:8080/sites/default/files/11112011125.xml";
  curl_setopt($ch, CURLOPT_URL,$url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  $output = curl_exec($ch);
  curl_close($ch);
  $data = simplexml_load_string($output);
  $json = json_encode($data);
  $array = json_decode($json, TRUE);
 /* 
  //test
  $role_name = 'bnu_teacher';
  $role = array(':role' => $role_name);
  
  // Get RID of role
  $result = db_query("SELECT r.rid FROM {role} r WHERE r.name = :role", $role)->fetchField();
 // $result = db_query("SELECT r.rid FROM {role} r WHERE r.name = 'bnu_teacher'")->fetchField();
  dpm($result);
 global $user;
 // Add the role to current user
  dpm($user);
 if(!isset($user->roles[$result])){
   $roles  = $user->roles + array($result => $role_name);
    user_save($user, array('roles' => $roles));
    dpm($roles);
 } 
*/
  return $array;
}

/**
 * Custom form validation function
 * 
 */
 function bnu_module_user_form_validate($form, &$form_state) {
   //if inner database does not contain the name& password we need.
  if (empty($form_state['uid'])) {
    if (!bnu_module_authenticate($form_state)) {
      watchdog("bnu_module", "unable to implement bnu_module_user_form_validate", array()); 
      form_set_error('name', $form_state['input']['pass']);
    }
  }
 }
/**
 * Custom user authentication function.
 */
 function bnu_module_authenticate(&$form_state) {
   $username = $form_state['input']['name'];
   $password = $form_state['input']['pass'];
   //check if there are the same username in current {user} but not in {authmap}
   $usernum = db_query('SELECT * FROM {users}  WHERE name = :name', array(':name' => $username))->rowCount();
   $authnum = db_query('SELECT * FROM {authmap}  WHERE authname = :authname', array(':authname' => $username))->rowCount();
   if($usernum >0 && $authnum ==0)
     return TRUE;
   
   $auth = xml_parse_xservice("bor-auth", $username, $password);
   if(array_key_exists('z303',$auth)){
    // $username = $auth['z303']['z303-id'];
     $mail = $auth['z304']['z304-email-address'];
     $status = $auth['z305']['z305-bor-status'];
     $role = _get_role_from_status($status);
     //After the external confirmation of the username and password, we just save the new username and password and login.
     bnu_user_external_login_register($form_state, $username, $mail, $password, 'bnu_module', $role);
     //user_external_login_register($username, 'bnu_module');
     return TRUE;
   }
    else {
     return FALSE; 
   }
 }
/**
 * Implements hook_user_insert().
 */
 function bnu_module_user_insert(&$edit, &$account, $category = NULL) {
   global $bnu_module_authenticated;
    if($bnu_module_authenticated) {
      $email =  "test@163.com";
      // Set e-mail address in the users table for this user.
      db_update('users')
        ->fields(
            array('mail' => $email,) 
          )
        ->conditon('uid', $account->uid)
        ->execute();
    }
}

/**
 * See modules/user/user.module
 * Helper function for authentication modules. Either logs in or registers
 * the current user, based on username. Either way, the global $user object is
 * populated and login tasks are performed.
 */
function bnu_user_external_login_register(&$form_state, $name, $mail, $password, $module, $role_name) {
  
  $role = array(':role' => $role_name);
  // Get RID of role
  $result = db_query("SELECT r.rid FROM {role} r WHERE r.name = :role", $role)->fetchField();
 //$result = db_query("SELECT r.rid FROM {role} r WHERE r.name = 'bnu_teacher'")->fetchField();
 //global $user;
  $account = user_external_load($name);
  if (!$account) {
    // Register this new user.
    $userinfo = array(
      'name' => $name,
      'pass' => $password,
      'init' => $name,
      'status' => 1,
      'mail' => $mail,
      'access' => REQUEST_TIME
    );
    $account = user_save(drupal_anonymous_user(), $userinfo);
  // Add the role to current user
 if(!isset($account->roles[$result])){
   $roles  = $account->roles + array($result => $role_name);
    user_save($account, array('roles' => $roles));
 }
   // Terminate if an error occurred during user_save().
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      return;
    }
    user_set_authmaps($account, array("authname_$module" => $name));
  }else{
    //even if the account was logged before,we should check if the password changed
    if(!user_authenticate($name, $password) || $account->mail != $mail){
      user_save($account, array('pass' => $password,'mail' =>$mail));
    }
  }
  // Log user in.
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
}


/*
 * Implements hook_user_update().
 * Update pds password and mail once the external user updated the password and mail.
 */
function bnu_module_user_update(&$edit, $account, $category) {
  /*
  dpm($edit);
  dpm($account);
  dpm($category);
   * 
   */
  //1.Check if the user is external user.
  
  
  //2.Check the current password and username with pds.
  
  //3.If the current password and mail does not match with pds.Update pds password and mail.
  
  //4.if 3. works ,then return true, otherwise Report error.
  
}

/**
 * Delete from user_profile_form the password and mail update place when the user is external.
 * Implements hook_form_form_id_alter()
 */
function bnu_module_form_user_profile_form_alter(&$form, &$form_state, $form_id){
  //$name = $form['account']
  
  $uid = $form['#user']->uid;
  $authnum = db_query('SELECT * FROM {authmap}  WHERE uid = :uid', array(':uid' => $uid))->rowCount();
  if($authnum > 0 ){
      $form['account']['name']['#disabled'] = TRUE;
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['pass']['#disabled'] = TRUE;
      $form['account']['current_pass_required_value']['#disabled'] = TRUE;
      $form['account']['current_pass']['#disabled'] = TRUE;
  }
}
